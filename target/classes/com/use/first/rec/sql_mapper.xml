<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.use.first.rec.RecDAO">

	<select id="recList" resultType="com.use.first.rec.RecVO">
		select review.v_id, review.v_mid, review.v_pid, review.v_content,
		product.p_name,review.v_date from
		review, product
		where review.v_pid = product.p_id
		<if test="searchType == ''.toString()">
			AND (v_mid LIKE CONCAT ('%', #{keyword},'%') or v_pid LIKE CONCAT('%', #{keyword},'%') or product.p_name LIKE CONCAT('%', #{keyword},'%'))
		</if>
		<if test="searchType == 't'.toString()">
			AND v_mid LIKE CONCAT('%', #{keyword},'%')
		</if>
		<if test="searchType == 'c'.toString()">
			AND v_pid LIKE CONCAT('%', #{keyword},'%')
		</if>
		<if test="searchType == 'w'.toString()">
			AND product.p_name LIKE CONCAT('%', #{keyword},'%')
		</if>
		ORDER BY v_id desc
		limit #{pageStart}, #{perPageNum}
	</select>

	<select id="getRecTotalCount" resultType="int">
		select count(*) from
		review, product
		where review.v_pid = product.p_id
		<include refid="searchCondition"></include>
	</select>


	<sql id="searchCondition">
		<if test="searchType != null">
			<if test="searchType == ''.toString()">
			AND (v_mid LIKE CONCAT ('%', #{keyword},'%') or v_pid LIKE CONCAT('%', #{keyword},'%') or product.p_name LIKE CONCAT('%', #{keyword},'%'))
			</if>		
			<if test="searchType == 't'.toString()">
				AND v_mid LIKE CONCAT('%', #{keyword},'%')
			</if>
			<if test="searchType == 'c'.toString()">
				AND v_pid LIKE CONCAT('%', #{keyword},'%')
			</if>
			<if test="searchType == 'w'.toString()">
				AND product.p_name LIKE CONCAT('%', #{keyword},'%')
			</if>
		</if>
	</sql>
	
	<update id="recUpdate">
	<![CDATA[
		UPDATE review SET v_content = #{param2}
		WHERE v_id = #{param1}
	]]>
	</update>
	
	<!-- 내정보에서 추천글 리스트 -->
    <select id="memberRecList" resultType="com.use.first.rec.RecVO">
		select review.v_id, review.v_mid, review.v_pid, review.v_content, review.v_like,
		product.p_name,product.p_mainimg,review.v_date from
		review, product
		where review.v_pid = product.p_id and v_mid = #{param2}
		<if test="param1.searchType == 't'.toString()">
			AND v_mid LIKE CONCAT('%', #{param1.keyword},'%')
		</if>
		<if test="param1.searchType == 'c'.toString()">
			AND v_pid LIKE CONCAT('%', #{param1.keyword},'%')
		</if>
		<if test="param1.searchType == 'w'.toString()">
			AND product.p_name LIKE CONCAT('%', #{param1.keyword},'%')
		</if>
		ORDER BY v_id desc
		limit #{param1.pageStart}, #{param1.perPageNum}
	</select>

	<select id="memberRecTotalCount" resultType="int">
		select count(*) from
		review, product
		where review.v_mid = #{param2} and review.v_pid = product.p_id
		<include refid="searchMemberReviewCondition"></include>
	</select>
	
	<sql id="searchMemberReviewCondition">
		<if test="param1.searchType != null">
			<if test="param1.searchType == 't'.toString()">
				AND v_mid LIKE CONCAT('%', #{param1.keyword},'%')
			</if>
			<if test="param1.searchType == 'c'.toString()">
				AND v_pid LIKE CONCAT('%', #{param1.keyword},'%')
			</if>
			<if test="param1.searchType == 'w'.toString()">
				AND product.p_name LIKE CONCAT('%', #{param1.keyword},'%')
			</if>
		</if>
	</sql>
	
	<!-- 한 개의 추천글 -->
	<select id="memberOneRecommend" resultType="com.use.first.rec.RecVO">
		select review.v_id, review.v_mid, review.v_pid, review.v_content, review.v_like,
		product.p_name,product.p_mainimg,review.v_date from
		review, product
		where review.v_pid = product.p_id and v_id = #{v_id}
	</select>	
	
	<!-- 내 정보에서 추천글 수정 -->
	<update id="memberRecommenUpdate" parameterType="com.use.first.rec.RecVO">
		update review set v_content = #{v_content} , v_like = #{v_like} where v_id = #{v_id}
	</update>
	<!-- 내 정보에서 추천글 삭제 -->
	<delete id="memberRecommenDelete">
		delete from review where v_id = #{v_id}
	</delete>
	
	<!-- 작성가능 추천글 리스트 -->
	 <select id="memberCanRecList" resultType="com.use.first.buy.BuyVO">
	 select distinct buy.b_state, buy.b_id, buy.b_mid, buy.b_pid, buy.b_buydate, product.p_name,product.p_mainimg, buy.b_review, rental.r_sdate
	 from product,rental,buy
	 where buy.b_mid = #{param2} and product.p_id = rental.r_pid and rental.r_pid = buy.b_pid
	 and rental.r_state != '구매 확정' and buy.b_review='reviewNone' and rental.r_sdate between CURRENT_DATE-7 and CURRENT_DATE
	 ORDER BY rental.r_sdate desc
	 limit #{param1.pageStart}, #{param1.perPageNum}
	</select>  
	
	<select id="memberCanRecTotalCount" resultType="int">
		select count(distinct buy.b_state, buy.b_id, buy.b_mid, buy.b_pid, buy.b_buydate, product.p_name,product.p_mainimg, buy.b_review, rental.r_sdate) 
		from buy
		inner join rental on buy.b_pid = rental.r_pid
		inner join product on buy.b_pid = product.p_id
		where buy.b_mid = #{param2} and rental.r_pid = buy.b_pid
		and rental.r_state != '구매 확정' and buy.b_review='reviewNone' and rental.r_sdate between CURRENT_DATE-7 and CURRENT_DATE
	</select>
	<!-- buy테이블에 b_review에 yes로 -->
	<update id="buyListUpdate">
		update buy set b_review = 'reviewYes' where b_id = #{b_id}
	</update>
</mapper>
